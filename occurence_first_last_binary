#include <iostream>
#include <vector>
#include <utility>
using namespace std;

pair<int, int> firstAndLastPosition(vector<int> &arr, int n, int k)

{

    // first occurence
    int s = 0, e = n - 1;
    int mid = -1;
    int first = -1;

    while (s <= e)
    {
        mid = s + (e - s) / 2;
        if (arr[mid] == k)
        {
            first = mid;
            e = mid - 1;
        }
        else if (arr[mid] > k)
        {
            e = mid - 1;
        }
        else if (arr[mid] < k)
        {
            s= mid +1;
        }
    }
    // last occurence
    s = 0, e = n - 1;
    int last = -1;
    while (s <= e)
    {
        mid = s + (e - s) / 2;
        if (arr[mid] == k)
        {
            last = mid;
            s = mid + 1;
        }
        else if (arr[mid] > k)
        {
            e = mid - 1;
        }
        else if (arr[mid] < k)
        {
            s = mid + 1;
        }
    }
    return make_pair(first, last);
}
int main()
{
    vector<int> arr = {0, 2, 3, 4, 4, 4, 4, 4, 4, 6, 7, 999};
    int size = arr.size();
    pair<int, int> result = firstAndLastPosition(arr, size, 9990);
    cout << result.first << " " << result.second << endl;
    cout << "total = " << (result.second - result.first) + 1 << endl; //total occurence
    return 0;
}
